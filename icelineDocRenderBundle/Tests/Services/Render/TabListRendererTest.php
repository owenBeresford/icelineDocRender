<?php
namespace icelineLtd\icelineDocRenderBundle\Tests\Services\Render;

use icelineLtd\icelineDocRenderBundle\Services\PageService;
use icelineLtd\icelineDocRenderBundle\Services\PHPArrayConfig;
use icelineLtd\icelineDocRenderBundle\Services\StaticValuesFactory;
use icelineLtd\icelineDocRenderBundle\Services\WikiFactory;
use icelineLtd\icelineDocRenderBundle\Services\Chunks\ProgrammaticChunk;
use icelineLtd\icelineDocRenderBundle\Services\Chunks\ParseAsPHP5Chunk;
use icelineLtd\icelineDocRenderBundle\Tests\Mocks\MockLogger;
use icelineLtd\icelineDocRenderBundle\Tests\Fixture\ResourceMaker;
use icelineLtd\icelineDocRenderBundle\Tests\Mocks\MockPageCollection;
use icelineLtd\icelineDocRenderBundle\ResourceInterface;
use icelineLtd\icelineDocRenderBundle\ChunkInterface;
use icelineLtd\icelineDocRenderBundle\ConfigInterface;
use icelineLtd\icelineDocRenderBundle\Exceptions\BadResourceException;
use icelineLtd\icelineDocRenderBundle\TemplateRendererInterface;
use icelineLtd\icelineDocRenderBundle\Services\Transform\TemplateRenderer;
use icelineLtd\icelineDocRenderBundle\Services\Transform\TemplateMerge;
use icelineLtd\icelineDocRenderBundle\Services\Render\NoTransformRenderer;
use icelineLtd\icelineDocRenderBundle\Services\Render\JSRenderer;
use icelineLtd\icelineDocRenderBundle\Services\Render\CSSRenderer;
use icelineLtd\icelineDocRenderBundle\Services\Render\WikiRenderer;
use icelineLtd\icelineDocRenderBundle\Services\Render\TabListRenderer;
use Symfony\Component\HttpFoundation\Session\SessionInterface  ;
use icelineLtd\icelineDocRenderBundle\PageServiceInterface;
use Symfony\Component\HttpKernel\Log\LoggerInterface;
$_SERVER['SERVER_ADDR']='127.0.0.1';


/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-03 at 15:03:08.
 */
class TabListRendererTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var TabListRenderer
     */
    protected $obj;
	protected $maker;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
		$this->maker=new ResourceMaker();
        $this->obj = new TabListRenderer();
		$cfile=__DIR__.'/../../../Resources/config/site_config.php';
		$conf=new PHPArrayConfig($cfile);
		$this->obj->setConfig($conf);
		$this->obj->setResourceHash($this->maker->getTabList001());

	     $tmp = new TemplateRenderer();
		$tmp->setWorker(new NoTransformRenderer());
		$tmp->setWorker(new CSSRenderer());
		$tmp->setWorker(new JSRenderer());
		$w=(new WikiFactory( ))->setConfig($conf)->setPageCollection(new MockPageCollection($conf));
		$tmp->setWorker((new WikiRenderer("xhtml" ))->setWiki($w));
	
		$this->obj->setTemplateRenderer($tmp);	
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }


    /**
     * Generated from @assert $obj->render($in) == 'string'.
     *
     * @covers icelineLtd\icelineDocRenderBundle\Services\Render\TabListRenderer::render
     */
    public function testRender01()
    {
		$in=new ParseAsPHP5Chunk('tabs', function() { return array(
        array(
        'summary-class' => 'sumClass',
        'summary-id' => 's1',
        'tab-summary' => 'fd dg dgdfgdfgdfgdf',
        'tab-class'=>'tabClass',
        'tab-id'=> 't1',
        'tab-body' =>'sdfsd sfssdfsdfsdfsdfsdfsdfsdfsdfsd',
        'button-id'=>'btn1',
        'title'=>'sdfsdsfsdsd',
                ),
        array(
        'summary-class' => 'sumClass',
        'summary-id' => 's2',
        'tab-summary' => 'fd dg dgdfgdfgdfgdf',
        'tab-class'=>'tabClass',
        'tab-id'=> 't2',
        'tab-body' =>'sdfsd sfssddfgd fgfgdfgddfgfgsdfsdfsdfsd',
        'button-id'=>'btn2',
        'title'=>'swefawwad',
                ),
        array(
        'summary-class' => 'sumClass',
        'summary-id' => 's3',
        'tab-summary' => 'fd dg dgdfgdfgdfgdf',
        'tab-class'=>'tabClass',
        'tab-id'=> 't3',
        'tab-body' =>'sktjfdreyjgndfg drtjd ses ewtykmfgbsweyurkghnbdffr6gyhnhs',
        'button-id'=>'btn3',
        'title'=>'s5utyhndfst',
                ),


        'tab-main-class' =>'mainClass',
        'first-tab' =>'btn1',
        'render-local' =>1,

                                ); }, 'tablist', null);
		$ret=$this->obj->render($in);
        $this->assertEquals(
            'string',
            gettype($ret)
        );
// add a check for each of those IDs	
    }

    public function testRender02()
    {
		$in=new ParseAsPHP5Chunk('tabs', function() { return array(
        'tab-main-class' =>'mainClass',
        'first-tab' =>'btn1',
        'render-local' =>1,
                                ); }, 'tablist', null);
        $this->assertEquals(
            'string',
            gettype($this->obj->render($in))
        );
    }

    public function testRender03()
    {
		$in=new ParseAsPHP5Chunk('tabs', function() { 
return array(
        array(
        'summary-class' => 'sumClass',
        'summary-id' => 's1',
        'tab-summary' => 'fd dg dgdfgdfgdfgdf',
        'tab-class'=>'tabClass',
        'tab-id'=> 't1',
        'tab-body' =>'sdfsd sfssdfsdfsdfsdfsdfsdfsdfsdfsd',
        'button-id'=>'btn1',
        'title'=>'sdfsdsfsdsd',
                ),
        array(
        'summary-class' => 'sumClass',
        'summary-id' => 's2',
        'tab-summary' => 'fd dg dgdfgdfgdfgdf',
        'tab-class'=>'tabClass',
        'tab-id'=> 't2',
        'tab-body' =>'sdfsd sfssddfgd fgfgdfgddfgfgsdfsdfsdfsd',
        'button-id'=>'btn2',
        'title'=>'swefawwad',
                ),
        array(
        'summary-class' => 'sumClass',
        'summary-id' => 's3',
        'tab-summary' => 'fd dg dgdfgdfgdfgdf',
        'tab-class'=>'tabClass',
        'tab-id'=> 't3',
        'tab-body' =>'sktjfdreyjgndfg drtjd ses ewtykmfgbsweyurkghnbdffr6gyhnhs',
        'button-id'=>'btn3',
        'title'=>'s5utyhndfst',
                ),
        'tab-main-class' =>'mainClass',
        'first-tab' =>'btn1',
        'render-local' =>1,
                                );

 }, 'tablist', null);

		$tt=$this->maker->getTabList001();
		$tt->setChunkRaw('tab-summary', '<p class="[[summary-class]]" id="[[summary-id]]">XXX</p>');
		$tt->setChunkRaw('tab-body', '<p class="[[tab-class]]" id="[[tab-id]]"> ggdfgdfgdfgdff</p>');
		$this->obj->setResourceHash($tt);

		$ret=$this->obj->render($in);
        $this->assertEquals(
            'string',
            gettype($ret)
        );
// add a check for each of those IDs	
    }

    /**
     * @covers icelineLtd\icelineDocRenderBundle\Services\Render\TabListRenderer::makeTabList
     * @todo   Implement testMakeTabList().
     */
    public function testMakeTabList()
    {
		$data=array(
        array(
        'summary-class' => 'sumClass',
        'summary-id' => 's1',
        'tab-summary' => 'fd dg dgdfgdfgdfgdf',
        'tab-class'=>'tabClass',
        'tab-id'=> 't1',
        'tab-body' =>'sdfsd sfssdfsdfsdfsdfsdfsdfsdfsdfsd',
        'button-id'=>'btn1',
        'title'=>'sdfsdsfsdsd',
                ),
        array(
        'summary-class' => 'sumClass',
        'summary-id' => 's2',
        'tab-summary' => 'fd dg dgdfgdfgdfgdf',
        'tab-class'=>'tabClass',
        'tab-id'=> 't2',
        'tab-body' =>'sdfsd sfssddfgd fgfgdfgddfgfgsdfsdfsdfsd',
        'button-id'=>'btn2',
        'title'=>'swefawwad',
                ),
        array(
        'summary-class' => 'sumClass',
        'summary-id' => 's3',
        'tab-summary' => 'fd dg dgdfgdfgdfgdf',
        'tab-class'=>'tabClass',
        'tab-id'=> 't3',
        'tab-body' =>'sktjfdreyjgndfg drtjd ses ewtykmfgbsweyurkghnbdffr6gyhnhs',
        'button-id'=>'btn3',
        'title'=>'s5utyhndfst',
                ),
        'tab-main-class' =>'mainClass',
        'first-tab' =>'btn1',
        'render-local' =>1,
                                );
		$ret=$this->obj->makeTablist($data);
		$this->assertEquals('string', getType($ret));
// add a check for each of those IDs	

    }



    /**
     * @covers icelineLtd\icelineDocRenderBundle\Services\Render\TabListRenderer::setConfig
     * @todo   Implement testSetConfig().
     */
    public function testSetConfig()
    {
        $this->markTestSkipped(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers icelineLtd\icelineDocRenderBundle\Services\Render\TabListRenderer::setResourceHash
     * @todo   Implement testSetResourceHash().
     */
    public function testSetResourceHash()
    {
        $this->markTestSkipped(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers icelineLtd\icelineDocRenderBundle\Services\Render\TabListRenderer::setFormat
     * @todo   Implement testSetFormat().
     */
    public function testSetFormat()
    {
        $this->markTestSkipped(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers icelineLtd\icelineDocRenderBundle\Services\Render\TabListRenderer::setTemplateRenderer
     * @todo   Implement testSetTemplateRenderer().
     */
    public function testSetTemplateRenderer()
    {
        $this->markTestSkipped(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers icelineLtd\icelineDocRenderBundle\Services\Render\TabListRenderer::getChunkType
     * @todo   Implement testGetChunkType().
     */
    public function testGetChunkType()
    {
        $this->markTestSkipped(
            'This test has not been implemented yet.'
        );
    }


}
