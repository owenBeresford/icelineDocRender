<?php
namespace icelineLtd\icelineDocRenderBundle\Tests\Services\Transform;

use icelineLtd\icelineDocRenderBundle\Services\Transform\FilterTransform;
use icelineLtd\icelineDocRenderBundle\Services\Chunks\ProgrammaticChunk;
use icelineLtd\icelineDocRenderBundle\Tests\Fixture\ResourceMaker;


/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-01 at 11:47:37.
 */
class FilterTransformTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var FilterTransform
     */
    protected $obj;
	protected $maker;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->obj = new FilterTransform();
		$this->maker=new ResourceMaker();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Generated from @assert $obj->transform($in) == 'icelineLtd\icelineDocRenderBundle\ResourceInterface'.
     *
     * @covers icelineLtd\icelineDocRenderBundle\Services\Transform\FilterTransform::transform
     */
    public function testTransform()
    {
		$in=$this->maker->getFilterResrc01();
        $this->assertEquals(
            'icelineLtd\icelineDocRenderBundle\Services\ResourceHash',
            get_class($this->obj->transform($in))
        );
    }

    /**
     * Generated from @assert $obj->render(XXX) == get_class(XXX).
     *
     * @covers icelineLtd\icelineDocRenderBundle\Services\Transform\FilterTransform::render
     */
    public function testRender()
    {
		$in=new ProgrammaticChunk('test01', 'g dgdg dgd gaga dfgaga gaga gaga ggag', 'html', false);
		$out=$this->obj->render($in);
        $this->assertEquals(
            get_class($in),
            get_class($out)
        );
		$this->assertEquals("g dgdg dgd gaga dfgaga gaga gaga ggag", $out->getData());
		unset($in);

		$in=new ProgrammaticChunk('test02', '<p>g dgdg dgd gaga dfgaga gaga gaga gg</p>', 'wiki', 'nowrap');
		$out=$this->obj->render($in);
        $this->assertEquals(
            get_class($in),
            get_class($out)
        );
		$this->assertEquals("g dgdg dgd gaga dfgaga gaga gaga gg", $out->getData());
		unset($in);

		$in=new ProgrammaticChunk('test02', '<h2>g dgdg dgd gaga dfgaga gaga gaga gg</h2>', 'wiki', 'nowrap');
		$out=$this->obj->render($in);
        $this->assertEquals(
            get_class($in),
            get_class($out)
        );
		$this->assertEquals("<h2>g dgdg dgd gaga dfgaga gaga gaga gg</h2>", $out->getData());
		unset($in);

		$in=new ProgrammaticChunk('test03', 'http://www.google.co.uk/', 'plain', 'encode');
		$out=$this->obj->render($in);
        $this->assertEquals(
            get_class($in),
            get_class($out)
        );
		$this->assertEquals("http%3A%2F%2Fwww.google.co.uk%2F", $out->getData());
		unset($in);

		$in=new ProgrammaticChunk('test04', ['a'=>666,'b'=>888,'c'=>444], 'plain', 'json');
		$out=$this->obj->render($in);
        $this->assertEquals(
            get_class($in),
            get_class($out)
        );
		$this->assertEquals('{"a":666,"b":888,"c":444}', $out->getData());
		unset($in);

		$in=new ProgrammaticChunk('test04', null, 'plain', 'json');
		$out=$this->obj->render($in);
        $this->assertEquals(
            get_class($in),
            get_class($out)
        );
		$this->assertEquals('null', $out->getData());
		unset($in);

		$in=new ProgrammaticChunk('test04', ['a'=>$out,'b'=>888,'c'=>444], 'plain', 'json');
		$out=$this->obj->render($in);
        $this->assertEquals(
            get_class($in),
            get_class($out)
        );
		$this->assertEquals('{"a":{},"b":888,"c":444}', $out->getData());
		unset($in);

		$in=new ProgrammaticChunk('test05', '采采芣苢、薄言采之', 'html', 'escape');
		$out=$this->obj->render($in);
        $this->assertEquals(
            get_class($in),
            get_class($out)
        );
		$this->assertEquals("采采芣苢、薄言采之", $out->getData());
		unset($in);

		$in=new ProgrammaticChunk('test05', '<a href="http://www.google.co.uk/">google</a>', 'html', 'escape');
		$out=$this->obj->render($in);
        $this->assertEquals(
            get_class($in),
            get_class($out)
        );
		$this->assertEquals("&lt;a href&equals;\"http&colon;&sol;&sol;www&period;google&period;co&period;uk&sol;\"&gt;google&lt;&sol;a&gt;", $out->getData());
		unset($in);


    }

    /**
     * @covers icelineLtd\icelineDocRenderBundle\Services\Transform\FilterTransform::setLogger
     * @todo   Implement testSetLogger().
     */
    public function testSetLogger()
    {
        $this->markTestSkipped(
            'This test has not been implemented yet.'
        );
    }
}
