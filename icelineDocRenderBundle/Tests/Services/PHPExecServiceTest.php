<?php
namespace icelineLtd\icelineDocRenderBundle\Tests\Services;

use icelineLtd\icelineDocRenderBundle\Services\PHPExecService ;
use icelineLtd\icelineDocRenderBundle\Tests\Mocks\MockLogger;
use icelineLtd\icelineDocRenderBundle\Services\PHPArrayConfig;
$_SERVER['SERVER_ADDR']='127.0.0.1';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-04 at 18:29:33.
 */
class PHPExecServiceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var PHPExecService
     */
    protected $obj;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->obj = new PHPExecService();

		$cfile=__DIR__.'/../../Resources/config/site_config.php';
		$conf=new PHPArrayConfig($cfile);
		$this->obj->setConfig($conf);

		$this->obj->setLogger(new MockLogger());

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Generated from @assert $obj->safeFunc(";") == Exception.
     *
     * @covers icelineLtd\icelineDocRenderBundle\Services\PHPExecService::safeFunc
     */
    public function testSafeFunc()
    {
        $this->assertTrue(
            is_callable($this->obj->safeFunc(";", 'f1'))
        );
    }

    /**
     * Generated from @assert $obj->safeFunc("return false;") == callable.
     *
     * @covers icelineLtd\icelineDocRenderBundle\Services\PHPExecService::safeFunc
     */
    public function testSafeFunc2()
    {
        $this->assertTrue(
            is_callable($this->obj->safeFunc("return false;", 'f2'))
        );
    }

    /**
     * Generated from @assert $obj->safeFunc("return false") == Exception.
     *
     * @covers icelineLtd\icelineDocRenderBundle\Services\PHPExecService::safeFunc
     */
    public function testSafeFunc3()
    {
		$this->setExpectedException('icelineLtd\icelineDocRenderBundle\Exceptions\BadResourceException');
        $this->assertTrue(
            is_callable($this->obj->safeFunc("return false", 'f3'))
        );
    }

    /**
     * Generated from @assert $obj->safeFunc("throw new \Exception();") == callable.
     *
     * @covers icelineLtd\icelineDocRenderBundle\Services\PHPExecService::safeFunc
     */
    public function testSafeFunc4()
    {
        $this->assertTrue(
            is_callable( $this->obj->safeFunc("throw new \Exception();", 'f4'))
        );
    }




    /**
     * @covers icelineLtd\icelineDocRenderBundle\Services\PHPExecService::setConfig
     * @todo   Implement testSetConfig().
     */
    public function testSetConfig()
    {
        $this->markTestSkipped(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers icelineLtd\icelineDocRenderBundle\Services\PHPExecService::setLogger
     * @todo   Implement testSetLogger().
     */
    public function testSetLogger()
    {
        $this->markTestSkipped(
            'This test has not been implemented yet.'
        );
    }
}
