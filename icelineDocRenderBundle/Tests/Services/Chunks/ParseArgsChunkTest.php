<?php
namespace icelineLtd\icelineDocRenderBundle\Tests\Services\Chunks;

use icelineLtd\icelineDocRenderBundle\Services\Chunks\ParseArgsChunk;
use icelineLtd\icelineDocRenderBundle\ResourceInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-04 at 09:15:47.
 */
class ParseArgsChunkTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ParseArgsChunk
     */
    protected $obj;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->obj = new ParseArgsChunk("name", "value", "postarg", false);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers icelineLtd\icelineDocRenderBundle\Services\Chunks\ParseArgsChunk::getChunkType
     * @todo   Implement testGetChunkType().
     */
    public function testGetChunkType()
    {
        $this->markTestSkipped(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers icelineLtd\icelineDocRenderBundle\Services\Chunks\ParseArgsChunk::obj->unpack
     * @todo   Implement testUnpack().
     */
    public function testUnpack01()
    {
//	obj->unpack($data, $name, $filter)
		$data="|thing1|thing2|thing3";
		$ret=$this->obj->unpack($data, 'args', false);
		$this->assertSame(get_class($this->obj), get_class($ret));
		$this->assertTrue(is_array($ret->getData()));
    }

    public function testUnpack02()
    {
//	obj->unpack($data, $name, $filter)
		$data="|thing1||thing2|thing3";
		$ret=$this->obj->unpack($data, 'args', false);
		$this->assertSame(get_class($this->obj), get_class($ret));
		$this->assertTrue(is_array($ret->getData()));
    }

    public function testUnpack03()
    {
//	obj->unpack($data, $name, $filter)
		$data="thing1|thing2|thing3";
		$ret=$this->obj->unpack($data, 'args', false);
		$this->assertSame(get_class($this->obj), get_class($ret));
		$this->assertTrue(is_array($ret->getData()));
    }


    public function testValidate01()
    {
//	obj->unpack($data, $name, $filter)
		$data="|thing1|thing2|thing3";
		$ret=$this->obj->unpack($data, 'args', false);
		$this->assertSame(get_class($this->obj), get_class($ret));
		$this->assertTrue($ret->validate());
    }

    public function testValidate02()
    {
//	obj->unpack($data, $name, $filter)
		$data="|thing1||thing2|thing3";
		$ret=$this->obj->unpack($data, 'args', false);
		$this->assertSame(get_class($this->obj), get_class($ret));
		$this->assertFalse($ret->validate());
    }

    public function testValidate03()
    {
//	obj->unpack($data, $name, $filter)
		$data="thing1|thing2|thing3";
		$ret=$this->obj->unpack($data, 'args', false);
		$this->assertSame(get_class($this->obj), get_class($ret));
		$this->assertTrue($ret->validate());
    }


}
