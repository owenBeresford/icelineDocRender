<?php
namespace icelineLtd\icelineDoc\Tests\Services\Transform;

use icelineLtd\icelineDocRenderBundle\Tests\Mocks\MockPageCollection;
use icelineLtd\icelineDocRenderBundle\Services\Transform\TemplateRenderer;
use icelineLtd\icelineDocRenderBundle\Tests\Fixture\ResourceMaker;
use icelineLtd\icelineDocRenderBundle\Services\Chunks\ProgrammaticChunk;
use icelineLtd\icelineDocRenderBundle\Services\Render\NoTransformRenderer; 
use icelineLtd\icelineDocRenderBundle\Services\StaticValuesFactory;
use icelineLtd\icelineDocRenderBundle\Services\PHPArrayConfig ;
$_SERVER['SERVER_ADDR']='127.0.0.1';
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-21 at 19:22:01.
 */
class TemplateRendererTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var TemplateRenderer
     */
    protected $obj;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
		$cfile=__DIR__.'/../../../Resources/config/site_config.php';
        $this->obj = new TemplateRenderer();

		$this->obj->setWorker(new NoTransformRenderer());
		$this->maker=new ResourceMaker();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Generated from @assert $obj->setWorker(new X) == 'the class'.
     *
     * @covers icelineLtd\icelineLtdDocRenderBundle\Services\Transform\TemplateRenderer::setWorkers
     */
    public function testSetWorkers()
    {
        $this->assertEquals(
            'icelineLtd\icelineDocRenderBundle\Services\Transform\TemplateRenderer',
            get_class($this->obj->setWorker(new NoTransformRenderer()))
        );
    }

    /**
     * Generated from @assert $obj->transform($in) == 'the class'.
     *
     * @covers icelineLtd\icelineDocRenderBundle\Services\Transform\TemplateRenderer::transform
     */
    public function testTransform()
    {
		$in=$this->maker->makeFramePage002();
		$out=$this->obj->transform($in);
        $this->assertEquals(
            'icelineLtd\icelineDocRenderBundle\Services\ResourceHash',
            get_class($out)
        );

        $this->assertEquals(
			count($in->getAllChunks()),
			count($out->getAllChunks())
				);
    }

    public function testTransform2()
    {
		$in=$this->maker->makeFramePage002();
		$this->setExpectedException('icelineLtd\icelineDocRenderBundle\Exceptions\NoImplException');
		$in->setChunk('last', new ProgrammaticChunk('last', 'dgdgdf gdfgd gdf gdfg ', 'fghfghgh', false));
		$out=$this->obj->transform($in);
        $this->assertEquals(
            'icelineLtd\icelineDocRenderBundle\Services\ResourceHash',
            get_class($out)
        );

        $this->assertEquals(
			count($in->getAllChunks()),
			count($out->getAllChunks())
				);
    }


    /**
     * @covers icelineLtd\icelineDocRenderBundle\Services\Transform\TemplateRenderer::render
     * @todo   Implement testRender().
     */
    public function testRender()
    {
        $this->markTestSkipped(
            'This test has not been implemented yet.'
        );
    }
}
